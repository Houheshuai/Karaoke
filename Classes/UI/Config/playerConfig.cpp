#include "appConfig.h"
#include "PlayerConfig.h"
#include <lib/rsa/rsa.h>

/*
*	PLAYER DISPLAY SIZE
*/
enum {
	CP_480P = 0,
	CP_576P,
	CP_720P,
	CP_RESO_NUM,
};

/*
************************************************
*	INDIAN PERSONG MUS DEMUX PRIVATE KEY
************************************************
*/
static R_RSA_PRIVATE_KEY PRIVATE_KEY_IN_A = {

1024,

{

 0x94,

 0xE0,0x82,0x1E,0xA6,0x35,0x86,0xE3,0x9A,0xF5,0xD9,

 0x4C,0x13,0xE2,0x7C,0x51,0xB3,0x95,0xE8,0x1A,0x05,

 0xF6,0x95,0x05,0xA2,0x3A,0x8F,0x4A,0x89,0x1A,0x0F,

 0x69,0x60,0x8F,0xE3,0x0B,0x8D,0xDB,0x55,0xEA,0x84,

 0x3D,0x14,0x09,0xC8,0x20,0x93,0xC5,0x5B,0x68,0xEC,

 0x8A,0xF4,0x0A,0x38,0xF3,0xE3,0xC2,0xCD,0x98,0x49,

 0xBE,0x19,0x84,0xC0,0xE2,0xB8,0xF4,0xA4,0xD4,0x6C,

 0x4B,0x49,0xE8,0xB5,0xA6,0x33,0xB9,0xA2,0xC9,0x5B,

 0x66,0xF1,0x72,0x2F,0x4A,0x07,0x41,0x07,0xF4,0x43,

 0x33,0x2C,0x88,0xB4,0xF6,0x9F,0x1A,0x58,0x05,0x20,

 0xFE,0xE7,0x3A,0x73,0x36,0x0B,0xD6,0x61,0x38,0x3B,

 0xD1,0x7D,0xD5,0xCA,0xF9,0x96,0x91,0x40,0xD1,0xB5,

 0x25,0x75,0x81,0xD9,0xF9,0xE2,0x57,

},

{

 0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,

 0x0,0x0,0x0,0x0,0x01,0x00,0x01,

},

{

 0x7D,

 0xF4,0x2B,0x61,0xEE,0xD0,0x9E,0x5C,0x75,0xBF,0xC5,

 0xA5,0xBD,0xB5,0x01,0xE4,0xC5,0x80,0xF0,0x2B,0x04,

 0x1C,0x88,0x1B,0x8A,0x12,0xED,0x23,0xEC,0x36,0x66,

 0x0F,0x8B,0x28,0x70,0xB8,0x57,0xBD,0xD7,0x44,0x5F,

 0xB8,0xA4,0xF9,0x59,0x9D,0x66,0x27,0xB4,0x9C,0x62,

 0x73,0x74,0xE0,0x29,0x2A,0xFD,0xE8,0xD3,0xB4,0x21,

 0xBF,0x79,0x2A,0x32,0xFE,0x59,0x4B,0x74,0x3A,0x8C,

 0xEE,0x1A,0x10,0x79,0x86,0xAD,0xA2,0x29,0x96,0x34,

 0xE2,0x3C,0xD9,0x1D,0x19,0xDA,0xF4,0x98,0x0F,0xD6,

 0xC3,0xB0,0x24,0x3C,0xA5,0x27,0xFE,0xC5,0xCD,0xC8,

 0x1C,0x7F,0xEB,0x96,0x9E,0x90,0x05,0xF7,0x55,0x7D,

 0x29,0xAD,0x54,0x9B,0x01,0x66,0x15,0x37,0xC3,0x0F,

 0x01,0xBC,0x37,0x58,0x07,0xB8,0xD1,

},

{

{

 0xC6,

 0x44,0x53,0x45,0x7D,0xF6,0xB7,0x34,0xB7,0xCC,0x78,

 0x45,0x7C,0xA5,0x33,0x0C,0xE8,0x65,0x6E,0x38,0x41,

 0xDC,0x85,0xB2,0xC6,0x8C,0xEA,0x70,0x4A,0x74,0xB9,

 0xE1,0x2C,0xF7,0x99,0x64,0x5F,0xE3,0x20,0xED,0x08,

 0x0C,0x7A,0x1E,0xD5,0x3A,0x57,0x1B,0x0E,0x45,0xAF,

 0xE4,0xCB,0xE0,0x03,0xFB,0xD4,0xE0,0xA9,0x91,0xAC,

 0xDA,0xEA,0x1D,

},

{

 0xC0,

 0x3A,0x71,0xDD,0x71,0xF3,0x0A,0xD3,0x25,0xAD,0xF7,

 0x7A,0x8E,0x6D,0x4D,0x05,0xE5,0x5E,0x9A,0x99,0xDF,

 0x02,0x39,0x07,0x33,0x51,0xCC,0xAB,0xD6,0xEE,0xC5,

 0xC4,0xAB,0xD7,0x33,0x53,0xCB,0xFC,0x2F,0x2A,0x6B,

 0x1F,0xEF,0x59,0x74,0x05,0xB4,0x08,0xA2,0xEE,0x77,

 0xF7,0xD6,0x66,0x01,0xDA,0xF3,0x89,0x70,0x27,0x86,

 0x64,0x74,0x03,

},

},

{

{

 0x43,

 0x1A,0x7A,0xE8,0x89,0x32,0x88,0x5D,0x42,0x5B,0xE4,

 0xD4,0xF7,0xD3,0xDD,0xCC,0x5F,0x97,0x7C,0xCF,0x73,

 0x93,0x14,0x79,0x26,0x74,0x29,0x20,0xAA,0x42,0x89,

 0x6A,0xE9,0xD2,0x3F,0x4B,0x56,0x9C,0xC3,0xD7,0x15,

 0xA3,0x4B,0x6D,0xC6,0x13,0x41,0xC9,0xF9,0x71,0xA2,

 0x8F,0x98,0x65,0x10,0x54,0x1A,0x7F,0x93,0x44,0xA7,

 0xB1,0x4C,0x0D,

},

{

 0x91,

 0x1E,0x8E,0x3F,0xA3,0x7A,0xDC,0x3D,0x33,0x40,0xF6,

 0x88,0x2B,0x66,0x10,0xB3,0xD6,0xC9,0x68,0xE5,0xA9,

 0x1A,0x40,0x7B,0x53,0x1E,0xF9,0xE8,0xF0,0xC6,0x29,

 0xBF,0xA4,0x0B,0x3E,0xD0,0x90,0x3A,0xBE,0x50,0xC3,

 0xB6,0xC4,0x37,0x40,0x03,0xDE,0x3A,0x76,0xE6,0x98,

 0xE3,0x1D,0x94,0xBC,0xE9,0xD2,0xD9,0x7B,0x36,0x1B,

 0x9B,0x52,0x89,

},

},

{

 0xC3,

 0x36,0xE5,0x3F,0x52,0xA9,0x43,0x07,0xFC,0x15,0xD5,

 0xC2,0xA6,0x82,0x53,0x0F,0x61,0x92,0x48,0x0B,0xD5,

 0x4C,0xD9,0x89,0x82,0x58,0x4A,0xBA,0xE3,0xEA,0xC0,

 0xA7,0xF8,0x53,0x5E,0xAD,0x6B,0x6B,0x31,0xF1,0x30,

 0x64,0x80,0x2F,0xA2,0xD9,0xBD,0x5C,0x37,0xEE,0x98,

 0x79,0x52,0xCC,0xBC,0x13,0x64,0x06,0xEA,0x03,0x77,

 0xB1,0xCE,0x3A,

},

};

/*
***********************************************
*	NORTH KOREA MUS DEMUX PRIVATE KEY
***********************************************
*/
static R_RSA_PRIVATE_KEY PRIVATE_KEY_NK_A = {
	1024,
	{
	 0xB0,
	 0x14,0xAC,0xAC,0x7F,0xA8,0xC5,0x41,0xAA,0xC9,0x03,
	 0x79,0xC1,0x6B,0x1B,0x51,0x45,0x05,0xCB,0xDA,0xC4,
	 0xF8,0xBA,0x45,0x3C,0xA1,0x14,0x42,0x60,0xAA,0xC1,
	 0xBA,0x43,0x74,0x2F,0x0E,0x33,0x2D,0x3A,0x63,0xC4,
	 0x20,0x87,0x77,0x09,0xFC,0xA7,0xA0,0xA4,0x7E,0x05,
	 0x23,0x1C,0xE3,0x09,0x95,0x59,0xDD,0x52,0xE3,0x8F,
	 0xBB,0x7E,0x4B,0x17,0x79,0x63,0x58,0xC8,0x97,0x12,
	 0xDC,0x80,0x07,0xEE,0xF3,0xC6,0x6D,0x4E,0x54,0xFD,
	 0x7D,0xAC,0x4A,0x27,0x38,0x7D,0x93,0xFC,0xA9,0x5F,
	 0xEB,0x4F,0x55,0x46,0xC7,0x97,0xE0,0xB8,0x0F,0xEE,
	 0x6F,0x0F,0x69,0x77,0x3D,0x3B,0x67,0x65,0x05,0x1E,
	 0x0D,0x21,0x84,0xD9,0xD8,0xA4,0xB8,0x05,0xC0,0x30,
	 0xB9,0xFB,0x94,0x5E,0xA5,0xEC,0x71,
	},
	{
	 0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	 0x0,0x0,0x0,0x0,0x01,0x00,0x01,
	},
	{
	 0x18,
	 0x8B,0x19,0x32,0x86,0x2C,0xD1,0x2A,0x01,0x13,0x39,
	 0xCF,0xCB,0xDD,0x11,0x16,0xB7,0xE7,0x41,0xEE,0x01,
	 0x8C,0xA5,0xF2,0x26,0xAC,0x51,0x35,0x9B,0x61,0xD1,
	 0xD5,0x13,0xB7,0xEB,0x23,0x30,0x90,0xFA,0x55,0x93,
	 0xAD,0xF1,0x13,0xEF,0xA9,0x6E,0xF8,0x1E,0x55,0x8E,
	 0x83,0xC1,0x70,0x08,0x12,0xF0,0x4E,0xC0,0x52,0x05,
	 0xE3,0xDD,0x8B,0x80,0xA3,0x24,0x63,0xF0,0xD1,0xFC,
	 0xD9,0x5D,0xE6,0xD3,0x2C,0xFE,0xFD,0xA3,0x6E,0x11,
	 0xB3,0x8B,0x05,0x1F,0x64,0x3B,0xB3,0xA5,0xA2,0xA2,
	 0xCB,0x7C,0x92,0xBC,0xF5,0xA7,0x27,0x38,0x57,0x03,
	 0x8D,0x09,0x31,0x3D,0xA8,0x0D,0x8B,0x55,0x5B,0x18,
	 0xE7,0x3B,0x72,0xA4,0x35,0x09,0xBA,0x89,0x0B,0x79,
	 0x72,0x98,0xDE,0xF8,0x54,0xAA,0x91,
	},
	{
	{
	 0xE5,
	 0x16,0xD0,0x17,0xEC,0xF1,0x14,0xAE,0xF0,0xED,0x4F,
	 0x54,0x49,0xFB,0xC0,0x44,0x27,0xEF,0x64,0x2B,0x6D,
	 0x7F,0xF9,0x3D,0xF3,0x6D,0x25,0x81,0x09,0x3B,0x12,
	 0x5F,0x34,0x3A,0x18,0x1D,0x7B,0x09,0xD6,0xA9,0xD4,
	 0xED,0x71,0x8F,0x15,0x5D,0xD7,0xBA,0xA3,0x5A,0xAD,
	 0x21,0xB8,0x0D,0x70,0x74,0x82,0x63,0x42,0xBD,0x1A,
	 0xBF,0x9C,0x95,
	},
	{
	 0xC4,
	 0xC3,0xCA,0x3B,0xF9,0xD5,0x15,0x25,0xD4,0xD2,0x92,
	 0x49,0xDE,0x2C,0x7D,0xE7,0x70,0x5F,0x27,0x2C,0x4E,
	 0x3D,0x0A,0x4B,0x67,0xCF,0x01,0x9B,0x5C,0x99,0x72,
	 0x78,0x5C,0x1D,0xAF,0x70,0x15,0xF6,0x32,0x8C,0x28,
	 0x74,0x69,0x09,0xF8,0xFD,0xAA,0x6A,0x3F,0x56,0x9A,
	 0x3D,0xDC,0xBB,0x8B,0x4A,0x6F,0x24,0x77,0x46,0xD2,
	 0xCD,0xFD,0x6D,
	},
	},
	{
	{
	 0x2F,
	 0xC4,0x56,0xF5,0x76,0x29,0x3A,0x77,0xD3,0xB2,0x97,
	 0xA4,0xEA,0x9C,0x3C,0x95,0xB9,0x81,0xF7,0xEF,0xFA,
	 0x30,0x01,0xE7,0x41,0xF7,0x93,0x27,0x59,0xA6,0x60,
	 0x89,0x4B,0x59,0x85,0xA7,0xB7,0xFC,0xF0,0x2E,0x8F,
	 0x40,0x47,0x3A,0x5F,0x69,0x26,0xCF,0x3A,0xBA,0x70,
	 0x79,0x24,0x68,0x60,0xF7,0x5A,0x2C,0x9A,0x40,0xD5,
	 0xEF,0xF8,0x15,
	},
	{
	 0x1D,
	 0xCD,0xE6,0x69,0x35,0x4B,0xA0,0x7B,0x6D,0x84,0x43,
	 0xE2,0x6A,0x83,0xE4,0xC2,0x54,0xD4,0x24,0xF3,0xE2,
	 0x19,0xFE,0xE0,0x33,0x26,0x39,0x01,0x16,0x82,0xAB,
	 0xC3,0x2D,0x78,0xD5,0xA5,0x2D,0xBE,0x70,0x23,0xA8,
	 0xD1,0x11,0x44,0x10,0x72,0x24,0x09,0x19,0xF4,0xFD,
	 0x42,0x17,0x98,0x54,0xDD,0xFE,0x7D,0xD0,0x8F,0x6A,
	 0xC9,0x06,0xF5,
	},
	},
	{
	 0x6E,
	 0x9A,0x7E,0x72,0x46,0xE0,0xC6,0x81,0xBF,0xD2,0xAF,
	 0x25,0xD9,0x76,0x52,0x2A,0x79,0x61,0xCB,0xA3,0xC5,
	 0x96,0x88,0x1E,0x15,0x58,0xF7,0xA2,0xD5,0x1A,0x4F,
	 0x54,0xE2,0x27,0xAB,0xF5,0xD3,0xAF,0xD8,0x88,0xCE,
	 0x8F,0xE7,0xB1,0x4A,0xA8,0x78,0xD9,0xC6,0x92,0xA4,
	 0x9A,0x22,0xA0,0xE1,0x7E,0xC5,0xA0,0x9D,0x75,0x62,
	 0x64,0xD7,0x8F,
	},
};

void* musPrivateKeys[appMIC_Customer_Count] = 
{
	NULL,
	&PRIVATE_KEY_IN_A,
	NULL,
	&PRIVATE_KEY_NK_A,
};

//#define A10_AUDIO
//#define A20_AUDIO
//#define F20_AUDIO
//#define OPENSLES_AUDIO
//#define JAVA_AUDIO
#define AWJAVA_AUDIO

#ifdef _WIN32
#include "Win32Audio.h"
static AUDIO_HANDLE _Win32Audio_Init (int samplerate)
{
	return Win32Audio_Init();
}
CP_AudioIFs AudioIFs = 
{
	Win32AudioIn_Open,
	Win32AudioIn_Close,
	Win32AudioIn_Read,
	Win32AudioOut_Open,
	Win32AudioOut_Close,
	Win32AudioOut_Write,
	_Win32Audio_Init,
	Win32Audio_Finish,
	NULL,
};
#elif defined F20_AUDIO
#include "F20Audio.h"

CP_AudioIFs AudioIFs = 
{
	F20AudioIn_Open,
	F20AudioIn_Close,
	F20AudioIn_Read,
	F20AudioOut_Open,
	F20AudioOut_Close,
	F20AudioOut_Write,
	F20Audio_Init,
	F20Audio_Finish,
	F20Audio_Set
};
#elif defined A20_AUDIO
#include "A20Audio.h"
CP_AudioIFs AudioIFs = 
{
	A20AudioIn_Open,
	A20AudioIn_Close,
	A20AudioIn_Read,
	A20AudioOut_Open,
	A20AudioOut_Close,
	A20AudioOut_Write,
	A20Audio_Init,
	A20Audio_Finish,
	A20Audio_Set
};
#elif defined A10_AUDIO
#include "A10Audio.h"
CP_AudioIFs AudioIFs = 
{
	A10AudioIn_Open,
	A10AudioIn_Close,
	A10AudioIn_Read,
	A10AudioOut_Open,
	A10AudioOut_Close,
	A10AudioOut_Write,
	A10Audio_Init,
	A10Audio_Finish,
	A10Audio_Set
};
#elif defined OPENSLES_AUDIO
#include "OpenSLESAudio.h"
CP_AudioIFs AudioIFs = 
{
	OpenSLESAudioIn_Open,
	OpenSLESAudioIn_Close,
	OpenSLESAudioIn_Read,
	OpenSLESAudioOut_Open,
	OpenSLESAudioOut_Close,
	OpenSLESAudioOut_Write,
	OpenSLESAudio_Init,
	OpenSLESAudio_Finish,
	NULL
};
#elif defined JAVA_AUDIO
#include "AndroidJavaAudio.h"
CP_AudioIFs AudioIFs = 
{
	AndroidJavaAudioIn_Open,
	AndroidJavaAudioIn_Close,
	AndroidJavaAudioIn_Read,
	AndroidJavaAudioOut_Open,
	AndroidJavaAudioOut_Close,
	AndroidJavaAudioOut_Write,
	AndroidJavaAudio_Init,
	AndroidJavaAudio_Finish,
	AndroidJavaAudio_Set
};
#elif defined AWJAVA_AUDIO
#include "AWJavaAudio.h"
CP_AudioIFs AudioIFs = 
{
	AWJavaAudioIn_Open,
	AWJavaAudioIn_Close,
	AWJavaAudioIn_Read,
	AWJavaAudioOut_Open,
	AWJavaAudioOut_Close,
	AWJavaAudioOut_Write,
	NULL,
	AWJavaAudio_Finish,
	AWJavaAudio_Set
};


#endif

iMusPlayerExtConfig_t iMusExtParams[CP_RESO_NUM] = 
{
	{
		{"d:\\ResMIC\\player480p.res"},
		LanguageOptionValue_EN,
		&AudioIFs,
		NULL,
		1,
	},
	
	{
		{"d:\\ResMIC\\player576p.res"},
		LanguageOptionValue_EN,
		&AudioIFs,
		NULL,
		1,
	},
	
	{
		{"d:\\ResMIC\\player720p.res"},
		LanguageOptionValue_EN,
		&AudioIFs,
		NULL,
		1,
	},

};

void* getMusPlayerPrivateKey(unsigned int customer)
{
	if (customer < appMIC_Customer_Count)
		return musPrivateKeys[customer];
	else
		return NULL;
}

/*
*	set MUS PLAYER config by specified resolution
*/
static void setMusPlayerConfigByReso(int reso)
{
	iMusPlayerExtConfig_t* imusExtParams = &iMusExtParams[reso];
	int val;

	val = appConfig_getOptionValue(appMIC_Option_Language);
	if (val != -1)
	{
		imusExtParams->UILanguage = val;
	}
}

/*
*	set MUS PLAYER by config file
*/
void setMusPlayerByConfigFile(int DisplayOptionType)
{
	mus_printf("==setMusPlayerByConfigFile==DisplayOptionType[%d]====\n",DisplayOptionType);
	switch(DisplayOptionType)
	{
		case DisplayOptionValue_Hdmi720p:
		case DisplayOptionValue_720p:
			setMusPlayerConfigByReso(CP_720P);
			break;
		case DisplayOptionValue_PAL:
		case DisplayOptionValue_Hdmi576p:
		case DisplayOptionValue_576p:
			setMusPlayerConfigByReso(CP_720P);
			//setMusPlayerConfigByReso(CP_576P);
			break;
		default:
			setMusPlayerConfigByReso(CP_720P);
			//setMusPlayerConfigByReso(CP_480P);
			break;
	}
}

iMusPlayerExtConfig_t *getMusPlayerConfigInfo(int DisplayOptionType)
{
	char path[IMG_FILENAME_MAX_SZ];
	iMusPlayerExtConfig_t *iMusExtPara;
	
	mus_printf("getMusPlayerConfigInfo, DisplayOptionType = %d\n", DisplayOptionType); 

	memset(path, 0, sizeof(path));
	strcpy(path, appConfig_getPath(APPMIC_PATH_RES));
	
	switch(DisplayOptionType)
	{
		case DisplayOptionValue_Hdmi720p:
		case DisplayOptionValue_720p:
		{
			iMusExtPara = &iMusExtParams[CP_720P];
			memset(iMusExtPara->resFile, 0, sizeof(iMusExtPara->resFile));
			sprintf(iMusExtPara->resFile, "%splayer720p.res", path);
			break;
		}
		case DisplayOptionValue_PAL:
		case DisplayOptionValue_Hdmi576p:
		case DisplayOptionValue_576p:
		{
			iMusExtPara = &iMusExtParams[CP_576P];
			memset(iMusExtPara->resFile, 0, sizeof(iMusExtPara->resFile));
			sprintf(iMusExtPara->resFile, "%splayer576p.res", path);
			break;
		}
		default:
		{
			iMusExtPara = &iMusExtParams[CP_480P];
			memset(iMusExtPara->resFile, 0, sizeof(iMusExtPara->resFile));
			sprintf(iMusExtPara->resFile, "%splayer480p.res", path);
			break;
		}
	}

	return iMusExtPara;
}
