// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "multak.Key.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace multak {

void protobuf_ShutdownFile_multak_2eKey_2eproto() {
  delete Key::default_instance_;
}

void protobuf_AddDesc_multak_2eKey_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Key::default_instance_ = new Key();
  Key::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_multak_2eKey_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_multak_2eKey_2eproto {
  StaticDescriptorInitializer_multak_2eKey_2eproto() {
    protobuf_AddDesc_multak_2eKey_2eproto();
  }
} static_descriptor_initializer_multak_2eKey_2eproto_;


// ===================================================================

bool Key_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Key_Type Key::String;
const Key_Type Key::List;
const Key_Type Key::Hash;
const Key_Type Key::MultiString;
const Key_Type Key::MultiHash;
const Key_Type Key::ZSetRange;
const Key_Type Key::ZSetRevRange;
const Key_Type Key::ZSetScore;
const Key_Type Key::Type_MIN;
const Key_Type Key::Type_MAX;
const int Key::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Key::kUuidFieldNumber;
const int Key::kUsernameFieldNumber;
const int Key::kIdFieldNumber;
const int Key::kKeyFieldNumber;
const int Key::kStringValueFieldNumber;
const int Key::kListStringValueFieldNumber;
const int Key::kTypeFieldNumber;
const int Key::kMultiKeyValueFieldNumber;
const int Key::kMultiStringValueFieldNumber;
const int Key::kQueryTypeFieldNumber;
#endif  // !_MSC_VER

Key::Key()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Key::InitAsDefaultInstance() {
}

Key::Key(const Key& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Key::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  querytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Key::~Key() {
  SharedDtor();
}

void Key::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Key& Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_multak_2eKey_2eproto();  return *default_instance_;
}

Key* Key::default_instance_ = NULL;

Key* Key::New() const {
  return new Key;
}

void Key::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    id_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
    type_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    querytype_ = 0u;
  }
  list_string_value_.Clear();
  multi_key_value_.Clear();
  multi_string_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }
      
      // optional string key = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_string_value;
        break;
      }
      
      // repeated string list_string_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_list_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_list_string_value;
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional .multak.Key.Type type = 7 [default = String];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::multak::Key_Type_IsValid(value)) {
            set_type(static_cast< ::multak::Key_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_multi_key_value;
        break;
      }
      
      // repeated string multi_key_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multi_key_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_multi_key_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_multi_key_value;
        if (input->ExpectTag(74)) goto parse_multi_string_value;
        break;
      }
      
      // repeated string multi_string_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multi_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_multi_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_multi_string_value;
        if (input->ExpectTag(80)) goto parse_QueryType;
        break;
      }
      
      // optional uint32 QueryType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QueryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &querytype_)));
          set_has_querytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1 [default = ""];
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }
  
  // optional string username = 2 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }
  
  // optional string key = 4 [default = ""];
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }
  
  // optional string string_value = 5 [default = ""];
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->string_value(), output);
  }
  
  // repeated string list_string_value = 6;
  for (int i = 0; i < this->list_string_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->list_string_value(i), output);
  }
  
  // optional .multak.Key.Type type = 7 [default = String];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }
  
  // repeated string multi_key_value = 8;
  for (int i = 0; i < this->multi_key_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->multi_key_value(i), output);
  }
  
  // repeated string multi_string_value = 9;
  for (int i = 0; i < this->multi_string_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->multi_string_value(i), output);
  }
  
  // optional uint32 QueryType = 10;
  if (has_querytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->querytype(), output);
  }
  
}

int Key::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1 [default = ""];
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional string username = 2 [default = ""];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional string key = 4 [default = ""];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string string_value = 5 [default = ""];
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
    // optional .multak.Key.Type type = 7 [default = String];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 QueryType = 10;
    if (has_querytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->querytype());
    }
    
  }
  // repeated string list_string_value = 6;
  total_size += 1 * this->list_string_value_size();
  for (int i = 0; i < this->list_string_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->list_string_value(i));
  }
  
  // repeated string multi_key_value = 8;
  total_size += 1 * this->multi_key_value_size();
  for (int i = 0; i < this->multi_key_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->multi_key_value(i));
  }
  
  // repeated string multi_string_value = 9;
  total_size += 1 * this->multi_string_value_size();
  for (int i = 0; i < this->multi_string_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->multi_string_value(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Key*>(&from));
}

void Key::MergeFrom(const Key& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_string_value_.MergeFrom(from.list_string_value_);
  multi_key_value_.MergeFrom(from.multi_key_value_);
  multi_string_value_.MergeFrom(from.multi_string_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_querytype()) {
      set_querytype(from.querytype());
    }
  }
}

void Key::CopyFrom(const Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  
  return true;
}

void Key::Swap(Key* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(username_, other->username_);
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(string_value_, other->string_value_);
    list_string_value_.Swap(&other->list_string_value_);
    std::swap(type_, other->type_);
    multi_key_value_.Swap(&other->multi_key_value_);
    multi_string_value_.Swap(&other->multi_string_value_);
    std::swap(querytype_, other->querytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Key::GetTypeName() const {
  return "multak.Key";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace multak

// @@protoc_insertion_point(global_scope)
