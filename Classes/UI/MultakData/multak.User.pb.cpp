// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "multak.User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace multak {

void protobuf_ShutdownFile_multak_2eUser_2eproto() {
  delete User::default_instance_;
}

void protobuf_AddDesc_multak_2eUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  User::default_instance_ = new User();
  User::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_multak_2eUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_multak_2eUser_2eproto {
  StaticDescriptorInitializer_multak_2eUser_2eproto() {
    protobuf_AddDesc_multak_2eUser_2eproto();
  }
} static_descriptor_initializer_multak_2eUser_2eproto_;


// ===================================================================

bool User_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_Status User::UnknownS;
const User_Status User::Online;
const User_Status User::Offline;
const User_Status User::Status_MIN;
const User_Status User::Status_MAX;
const int User::Status_ARRAYSIZE;
#endif  // _MSC_VER
bool User_Available_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const User_Available User::UnknownA;
const User_Available User::Open;
const User_Available User::Locked;
const User_Available User::Delete;
const User_Available User::Available_MIN;
const User_Available User::Available_MAX;
const int User::Available_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int User::kUuidFieldNumber;
const int User::kUsernameFieldNumber;
const int User::kIdFieldNumber;
const int User::kSoftverFieldNumber;
const int User::kNicknameFieldNumber;
const int User::kLevelFieldNumber;
const int User::kSongNumberFieldNumber;
const int User::kFollowingidFieldNumber;
const int User::kFollowedidFieldNumber;
const int User::kFriendsidFieldNumber;
const int User::kStatusFieldNumber;
const int User::kAvailableFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kRegionFieldNumber;
const int User::kAgeFieldNumber;
const int User::kSexFieldNumber;
const int User::kAddressFieldNumber;
const int User::kHomenumberFieldNumber;
const int User::kMobilenumberFieldNumber;
const int User::kAllowMultipleLoginsFieldNumber;
const int User::kAssignInfo1FieldNumber;
const int User::kAssignInfo2FieldNumber;
const int User::kLaFieldNumber;
const int User::kLoFieldNumber;
const int User::kMusicboxFieldNumber;
const int User::kPropidFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void User::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  softver_ = 0u;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  status_ = 0;
  available_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0;
  sex_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  homenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobilenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allowmultiplelogins_ = false;
  assigninfo1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  assigninfo2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  la_ = 0;
  lo_ = 0;
  musicbox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  SharedDtor();
}

void User::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (homenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete homenumber_;
  }
  if (mobilenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilenumber_;
  }
  if (assigninfo1_ != &::google::protobuf::internal::kEmptyString) {
    delete assigninfo1_;
  }
  if (assigninfo2_ != &::google::protobuf::internal::kEmptyString) {
    delete assigninfo2_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_multak_2eUser_2eproto();  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    id_ = 0u;
    softver_ = 0u;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    level_ = 0u;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    status_ = 0;
    available_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    age_ = 0;
    sex_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_homenumber()) {
      if (homenumber_ != &::google::protobuf::internal::kEmptyString) {
        homenumber_->clear();
      }
    }
    if (has_mobilenumber()) {
      if (mobilenumber_ != &::google::protobuf::internal::kEmptyString) {
        mobilenumber_->clear();
      }
    }
    allowmultiplelogins_ = false;
    if (has_assigninfo1()) {
      if (assigninfo1_ != &::google::protobuf::internal::kEmptyString) {
        assigninfo1_->clear();
      }
    }
    if (has_assigninfo2()) {
      if (assigninfo2_ != &::google::protobuf::internal::kEmptyString) {
        assigninfo2_->clear();
      }
    }
    la_ = 0;
    lo_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    musicbox_ = 0;
  }
  songnumber_.Clear();
  followingid_.Clear();
  followedid_.Clear();
  friendsid_.Clear();
  propid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }
      
      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_softver;
        break;
      }
      
      // optional uint32 softver = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_softver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &softver_)));
          set_has_softver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_songNumber;
        break;
      }
      
      // repeated uint32 songNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_songNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_songnumber())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_songnumber())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_songNumber;
        if (input->ExpectTag(64)) goto parse_followingid;
        break;
      }
      
      // repeated uint32 followingid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_followingid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_followingid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_followingid;
        if (input->ExpectTag(72)) goto parse_followedid;
        break;
      }
      
      // repeated uint32 followedid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followedid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_followedid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_followedid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_followedid;
        if (input->ExpectTag(80)) goto parse_friendsid;
        break;
      }
      
      // repeated uint32 friendsid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_friendsid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friendsid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_friendsid;
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }
      
      // optional .multak.User.Status status = 11 [default = UnknownS];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::multak::User_Status_IsValid(value)) {
            set_status(static_cast< ::multak::User_Status >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_available;
        break;
      }
      
      // optional .multak.User.Available available = 12 [default = UnknownA];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::multak::User_Available_IsValid(value)) {
            set_available(static_cast< ::multak::User_Available >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_password;
        break;
      }
      
      // optional string password = 13 [default = ""];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_propid;
        break;
      }
      
      // repeated uint32 propid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_propid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_propid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_propid;
        if (input->ExpectTag(120)) goto parse_allowMultipleLogins;
        break;
      }
      
      // optional bool allowMultipleLogins = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowMultipleLogins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowmultiplelogins_)));
          set_has_allowmultiplelogins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_AssignInfo1;
        break;
      }
      
      // optional string AssignInfo1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AssignInfo1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assigninfo1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_AssignInfo2;
        break;
      }
      
      // optional string AssignInfo2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AssignInfo2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assigninfo2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_la;
        break;
      }
      
      // optional int32 la = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_la:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &la_)));
          set_has_la();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_lo;
        break;
      }
      
      // optional int32 lo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lo_)));
          set_has_lo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_musicbox;
        break;
      }
      
      // optional int32 musicbox = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_musicbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &musicbox_)));
          set_has_musicbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_region;
        break;
      }
      
      // optional string region = 21 [default = ""];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_age;
        break;
      }
      
      // optional int32 age = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_address;
        break;
      }
      
      // optional string address = 24 [default = ""];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_homenumber;
        break;
      }
      
      // optional string homenumber = 25 [default = ""];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_homenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_homenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_mobilenumber;
        break;
      }
      
      // optional string mobilenumber = 26 [default = ""];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobilenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1 [default = ""];
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }
  
  // optional string username = 2 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }
  
  // optional uint32 softver = 4 [default = 0];
  if (has_softver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->softver(), output);
  }
  
  // optional string nickname = 5 [default = ""];
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }
  
  // optional uint32 level = 6 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }
  
  // repeated uint32 songNumber = 7;
  for (int i = 0; i < this->songnumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->songnumber(i), output);
  }
  
  // repeated uint32 followingid = 8;
  for (int i = 0; i < this->followingid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->followingid(i), output);
  }
  
  // repeated uint32 followedid = 9;
  for (int i = 0; i < this->followedid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->followedid(i), output);
  }
  
  // repeated uint32 friendsid = 10;
  for (int i = 0; i < this->friendsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->friendsid(i), output);
  }
  
  // optional .multak.User.Status status = 11 [default = UnknownS];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->status(), output);
  }
  
  // optional .multak.User.Available available = 12 [default = UnknownA];
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->available(), output);
  }
  
  // optional string password = 13 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->password(), output);
  }
  
  // repeated uint32 propid = 14;
  for (int i = 0; i < this->propid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->propid(i), output);
  }
  
  // optional bool allowMultipleLogins = 15;
  if (has_allowmultiplelogins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->allowmultiplelogins(), output);
  }
  
  // optional string AssignInfo1 = 16;
  if (has_assigninfo1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->assigninfo1(), output);
  }
  
  // optional string AssignInfo2 = 17;
  if (has_assigninfo2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->assigninfo2(), output);
  }
  
  // optional int32 la = 18;
  if (has_la()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->la(), output);
  }
  
  // optional int32 lo = 19;
  if (has_lo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->lo(), output);
  }
  
  // optional int32 musicbox = 20;
  if (has_musicbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->musicbox(), output);
  }
  
  // optional string region = 21 [default = ""];
  if (has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->region(), output);
  }
  
  // optional int32 age = 22 [default = 0];
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->age(), output);
  }
  
  // optional int32 sex = 23 [default = 0];
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sex(), output);
  }
  
  // optional string address = 24 [default = ""];
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->address(), output);
  }
  
  // optional string homenumber = 25 [default = ""];
  if (has_homenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->homenumber(), output);
  }
  
  // optional string mobilenumber = 26 [default = ""];
  if (has_mobilenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->mobilenumber(), output);
  }
  
}

int User::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1 [default = ""];
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional string username = 2 [default = ""];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 softver = 4 [default = 0];
    if (has_softver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->softver());
    }
    
    // optional string nickname = 5 [default = ""];
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // optional uint32 level = 6 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .multak.User.Status status = 11 [default = UnknownS];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional .multak.User.Available available = 12 [default = UnknownA];
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->available());
    }
    
    // optional string password = 13 [default = ""];
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string region = 21 [default = ""];
    if (has_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
    // optional int32 age = 22 [default = 0];
    if (has_age()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }
    
    // optional int32 sex = 23 [default = 0];
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string address = 24 [default = ""];
    if (has_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional string homenumber = 25 [default = ""];
    if (has_homenumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->homenumber());
    }
    
    // optional string mobilenumber = 26 [default = ""];
    if (has_mobilenumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilenumber());
    }
    
    // optional bool allowMultipleLogins = 15;
    if (has_allowmultiplelogins()) {
      total_size += 1 + 1;
    }
    
    // optional string AssignInfo1 = 16;
    if (has_assigninfo1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assigninfo1());
    }
    
    // optional string AssignInfo2 = 17;
    if (has_assigninfo2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assigninfo2());
    }
    
    // optional int32 la = 18;
    if (has_la()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->la());
    }
    
    // optional int32 lo = 19;
    if (has_lo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lo());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 musicbox = 20;
    if (has_musicbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->musicbox());
    }

  }
  // repeated uint32 songNumber = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->songnumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->songnumber(i));
    }
    total_size += 1 * this->songnumber_size() + data_size;
  }
  
  // repeated uint32 followingid = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->followingid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->followingid(i));
    }
    total_size += 1 * this->followingid_size() + data_size;
  }
  
  // repeated uint32 followedid = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->followedid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->followedid(i));
    }
    total_size += 1 * this->followedid_size() + data_size;
  }
  
  // repeated uint32 friendsid = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->friendsid(i));
    }
    total_size += 1 * this->friendsid_size() + data_size;
  }
  
  // repeated uint32 propid = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->propid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->propid(i));
    }
    total_size += 1 * this->propid_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User*>(&from));
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  songnumber_.MergeFrom(from.songnumber_);
  followingid_.MergeFrom(from.followingid_);
  followedid_.MergeFrom(from.followedid_);
  friendsid_.MergeFrom(from.friendsid_);
  propid_.MergeFrom(from.propid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_softver()) {
      set_softver(from.softver());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_homenumber()) {
      set_homenumber(from.homenumber());
    }
    if (from.has_mobilenumber()) {
      set_mobilenumber(from.mobilenumber());
    }
    if (from.has_allowmultiplelogins()) {
      set_allowmultiplelogins(from.allowmultiplelogins());
    }
    if (from.has_assigninfo1()) {
      set_assigninfo1(from.assigninfo1());
    }
    if (from.has_assigninfo2()) {
      set_assigninfo2(from.assigninfo2());
    }
    if (from.has_la()) {
      set_la(from.la());
    }
    if (from.has_lo()) {
      set_lo(from.lo());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_musicbox()) {
      set_musicbox(from.musicbox());
    }
  }
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(username_, other->username_);
    std::swap(id_, other->id_);
    std::swap(softver_, other->softver_);
    std::swap(nickname_, other->nickname_);
    std::swap(level_, other->level_);
    songnumber_.Swap(&other->songnumber_);
    followingid_.Swap(&other->followingid_);
    followedid_.Swap(&other->followedid_);
    friendsid_.Swap(&other->friendsid_);
    std::swap(status_, other->status_);
    std::swap(available_, other->available_);
    std::swap(password_, other->password_);
    std::swap(region_, other->region_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(address_, other->address_);
    std::swap(homenumber_, other->homenumber_);
    std::swap(mobilenumber_, other->mobilenumber_);
    std::swap(allowmultiplelogins_, other->allowmultiplelogins_);
    std::swap(assigninfo1_, other->assigninfo1_);
    std::swap(assigninfo2_, other->assigninfo2_);
    std::swap(la_, other->la_);
    std::swap(lo_, other->lo_);
    std::swap(musicbox_, other->musicbox_);
    propid_.Swap(&other->propid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string User::GetTypeName() const {
  return "multak.User";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace multak

// @@protoc_insertion_point(global_scope)
