// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multak.Key.proto

#ifndef PROTOBUF_multak_2eKey_2eproto__INCLUDED
#define PROTOBUF_multak_2eKey_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace multak {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_multak_2eKey_2eproto();
void protobuf_AssignDesc_multak_2eKey_2eproto();
void protobuf_ShutdownFile_multak_2eKey_2eproto();

class Key;

enum Key_Type {
  Key_Type_String = 0,
  Key_Type_List = 1,
  Key_Type_Hash = 2,
  Key_Type_MultiString = 3,
  Key_Type_MultiHash = 4,
  Key_Type_ZSetRange = 5,
  Key_Type_ZSetRevRange = 6,
  Key_Type_ZSetScore = 7
};
bool Key_Type_IsValid(int value);
const Key_Type Key_Type_Type_MIN = Key_Type_String;
const Key_Type Key_Type_Type_MAX = Key_Type_ZSetScore;
const int Key_Type_Type_ARRAYSIZE = Key_Type_Type_MAX + 1;

// ===================================================================

class Key : public ::google::protobuf::MessageLite {
 public:
  Key();
  virtual ~Key();
  
  Key(const Key& from);
  
  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const Key& default_instance();
  
  void Swap(Key* other);
  
  // implements Message ----------------------------------------------
  
  Key* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  typedef Key_Type Type;
  static const Type String = Key_Type_String;
  static const Type List = Key_Type_List;
  static const Type Hash = Key_Type_Hash;
  static const Type MultiString = Key_Type_MultiString;
  static const Type MultiHash = Key_Type_MultiHash;
  static const Type ZSetRange = Key_Type_ZSetRange;
  static const Type ZSetRevRange = Key_Type_ZSetRevRange;
  static const Type ZSetScore = Key_Type_ZSetScore;
  static inline bool Type_IsValid(int value) {
    return Key_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Key_Type_Type_MIN;
  static const Type Type_MAX =
    Key_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Key_Type_Type_ARRAYSIZE;
  
  // accessors -------------------------------------------------------
  
  // optional string uuid = 1 [default = ""];
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // optional string username = 2 [default = ""];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // optional string key = 4 [default = ""];
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string string_value = 5 [default = ""];
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 5;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  
  // repeated string list_string_value = 6;
  inline int list_string_value_size() const;
  inline void clear_list_string_value();
  static const int kListStringValueFieldNumber = 6;
  inline const ::std::string& list_string_value(int index) const;
  inline ::std::string* mutable_list_string_value(int index);
  inline void set_list_string_value(int index, const ::std::string& value);
  inline void set_list_string_value(int index, const char* value);
  inline void set_list_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_list_string_value();
  inline void add_list_string_value(const ::std::string& value);
  inline void add_list_string_value(const char* value);
  inline void add_list_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& list_string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_list_string_value();
  
  // optional .multak.Key.Type type = 7 [default = String];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::multak::Key_Type type() const;
  inline void set_type(::multak::Key_Type value);
  
  // repeated string multi_key_value = 8;
  inline int multi_key_value_size() const;
  inline void clear_multi_key_value();
  static const int kMultiKeyValueFieldNumber = 8;
  inline const ::std::string& multi_key_value(int index) const;
  inline ::std::string* mutable_multi_key_value(int index);
  inline void set_multi_key_value(int index, const ::std::string& value);
  inline void set_multi_key_value(int index, const char* value);
  inline void set_multi_key_value(int index, const char* value, size_t size);
  inline ::std::string* add_multi_key_value();
  inline void add_multi_key_value(const ::std::string& value);
  inline void add_multi_key_value(const char* value);
  inline void add_multi_key_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& multi_key_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_multi_key_value();
  
  // repeated string multi_string_value = 9;
  inline int multi_string_value_size() const;
  inline void clear_multi_string_value();
  static const int kMultiStringValueFieldNumber = 9;
  inline const ::std::string& multi_string_value(int index) const;
  inline ::std::string* mutable_multi_string_value(int index);
  inline void set_multi_string_value(int index, const ::std::string& value);
  inline void set_multi_string_value(int index, const char* value);
  inline void set_multi_string_value(int index, const char* value, size_t size);
  inline ::std::string* add_multi_string_value();
  inline void add_multi_string_value(const ::std::string& value);
  inline void add_multi_string_value(const char* value);
  inline void add_multi_string_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& multi_string_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_multi_string_value();
  
  // optional uint32 QueryType = 10;
  inline bool has_querytype() const;
  inline void clear_querytype();
  static const int kQueryTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 querytype() const;
  inline void set_querytype(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:multak.Key)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_querytype();
  inline void clear_has_querytype();
  
  ::std::string* uuid_;
  ::std::string* username_;
  ::std::string* key_;
  ::std::string* string_value_;
  ::google::protobuf::uint32 id_;
  int type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> list_string_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> multi_key_value_;
  ::google::protobuf::RepeatedPtrField< ::std::string> multi_string_value_;
  ::google::protobuf::uint32 querytype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_multak_2eKey_2eproto();
  friend void protobuf_AssignDesc_multak_2eKey_2eproto();
  friend void protobuf_ShutdownFile_multak_2eKey_2eproto();
  
  void InitAsDefaultInstance();
  static Key* default_instance_;
};
// ===================================================================


// ===================================================================

// Key

// optional string uuid = 1 [default = ""];
inline bool Key::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Key::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Key::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Key::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Key::uuid() const {
  return *uuid_;
}
inline void Key::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Key::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Key::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Key::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string username = 2 [default = ""];
inline bool Key::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Key::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Key::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Key::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Key::username() const {
  return *username_;
}
inline void Key::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Key::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void Key::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* Key::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 id = 3 [default = 0];
inline bool Key::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Key::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Key::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Key::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Key::id() const {
  return id_;
}
inline void Key::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string key = 4 [default = ""];
inline bool Key::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Key::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Key::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Key::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Key::key() const {
  return *key_;
}
inline void Key::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Key::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Key::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Key::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string string_value = 5 [default = ""];
inline bool Key::has_string_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Key::set_has_string_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Key::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Key::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& Key::string_value() const {
  return *string_value_;
}
inline void Key::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Key::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Key::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* Key::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string list_string_value = 6;
inline int Key::list_string_value_size() const {
  return list_string_value_.size();
}
inline void Key::clear_list_string_value() {
  list_string_value_.Clear();
}
inline const ::std::string& Key::list_string_value(int index) const {
  return list_string_value_.Get(index);
}
inline ::std::string* Key::mutable_list_string_value(int index) {
  return list_string_value_.Mutable(index);
}
inline void Key::set_list_string_value(int index, const ::std::string& value) {
  list_string_value_.Mutable(index)->assign(value);
}
inline void Key::set_list_string_value(int index, const char* value) {
  list_string_value_.Mutable(index)->assign(value);
}
inline void Key::set_list_string_value(int index, const char* value, size_t size) {
  list_string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::add_list_string_value() {
  return list_string_value_.Add();
}
inline void Key::add_list_string_value(const ::std::string& value) {
  list_string_value_.Add()->assign(value);
}
inline void Key::add_list_string_value(const char* value) {
  list_string_value_.Add()->assign(value);
}
inline void Key::add_list_string_value(const char* value, size_t size) {
  list_string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Key::list_string_value() const {
  return list_string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Key::mutable_list_string_value() {
  return &list_string_value_;
}

// optional .multak.Key.Type type = 7 [default = String];
inline bool Key::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Key::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Key::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Key::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::multak::Key_Type Key::type() const {
  return static_cast< ::multak::Key_Type >(type_);
}
inline void Key::set_type(::multak::Key_Type value) {
  GOOGLE_DCHECK(::multak::Key_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated string multi_key_value = 8;
inline int Key::multi_key_value_size() const {
  return multi_key_value_.size();
}
inline void Key::clear_multi_key_value() {
  multi_key_value_.Clear();
}
inline const ::std::string& Key::multi_key_value(int index) const {
  return multi_key_value_.Get(index);
}
inline ::std::string* Key::mutable_multi_key_value(int index) {
  return multi_key_value_.Mutable(index);
}
inline void Key::set_multi_key_value(int index, const ::std::string& value) {
  multi_key_value_.Mutable(index)->assign(value);
}
inline void Key::set_multi_key_value(int index, const char* value) {
  multi_key_value_.Mutable(index)->assign(value);
}
inline void Key::set_multi_key_value(int index, const char* value, size_t size) {
  multi_key_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::add_multi_key_value() {
  return multi_key_value_.Add();
}
inline void Key::add_multi_key_value(const ::std::string& value) {
  multi_key_value_.Add()->assign(value);
}
inline void Key::add_multi_key_value(const char* value) {
  multi_key_value_.Add()->assign(value);
}
inline void Key::add_multi_key_value(const char* value, size_t size) {
  multi_key_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Key::multi_key_value() const {
  return multi_key_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Key::mutable_multi_key_value() {
  return &multi_key_value_;
}

// repeated string multi_string_value = 9;
inline int Key::multi_string_value_size() const {
  return multi_string_value_.size();
}
inline void Key::clear_multi_string_value() {
  multi_string_value_.Clear();
}
inline const ::std::string& Key::multi_string_value(int index) const {
  return multi_string_value_.Get(index);
}
inline ::std::string* Key::mutable_multi_string_value(int index) {
  return multi_string_value_.Mutable(index);
}
inline void Key::set_multi_string_value(int index, const ::std::string& value) {
  multi_string_value_.Mutable(index)->assign(value);
}
inline void Key::set_multi_string_value(int index, const char* value) {
  multi_string_value_.Mutable(index)->assign(value);
}
inline void Key::set_multi_string_value(int index, const char* value, size_t size) {
  multi_string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Key::add_multi_string_value() {
  return multi_string_value_.Add();
}
inline void Key::add_multi_string_value(const ::std::string& value) {
  multi_string_value_.Add()->assign(value);
}
inline void Key::add_multi_string_value(const char* value) {
  multi_string_value_.Add()->assign(value);
}
inline void Key::add_multi_string_value(const char* value, size_t size) {
  multi_string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Key::multi_string_value() const {
  return multi_string_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Key::mutable_multi_string_value() {
  return &multi_string_value_;
}

// optional uint32 QueryType = 10;
inline bool Key::has_querytype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Key::set_has_querytype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Key::clear_has_querytype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Key::clear_querytype() {
  querytype_ = 0u;
  clear_has_querytype();
}
inline ::google::protobuf::uint32 Key::querytype() const {
  return querytype_;
}
inline void Key::set_querytype(::google::protobuf::uint32 value) {
  set_has_querytype();
  querytype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace multak

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_multak_2eKey_2eproto__INCLUDED
